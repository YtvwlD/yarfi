#!/usr/bin/env python

# YARFI - Yet Another Replacement For Init
# Copyright (C) 2014 Niklas Sombert
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

print ("yarfi Copyright (C) 2014 Niklas Sombert")
print ("This program comes with ABSOLUTELY NO WARRANTY.")
print ("This is free software, and you are welcome to redistribute it")
print ("under certain conditions.")

import sys
from PySide.QtCore import QCoreApplication, QTimer

sys.path[0] = "/etc/yarfi"

#yarfi's own
from yarfi.DBusService import DBusService

services = []
app = QCoreApplication(sys.argv)

def reach_target(wanted_target):
	if debug:
		print ("Wanted target: " + wanted_target)
	target = __import__("targets."+wanted_target, fromlist=[wanted_target]).Target()
	print("Trying to reach "+ target.description +" target...")
	for conflict in target.conflicts:
		for srv in services:
			if conflict == srv.__name__:
				stop(conflict)
	for trg in target.depends_targets:
		reach_target(trg)
	remaining_dependencies = target.depends_services
	for srv in services:
		for dependency in remaining_dependencies:
			if srv.__name__ == dependency:
				remaining_dependencies.remove(dependency)
	for dependency in remaining_dependencies:
		start(dependency)
	print(target.description + " target reached.")

def start(srv):
	print ("Trying to start " + srv + "...")
	try:
		service = __import__("services."+srv, fromlist=[srv]).Service()
		for conflict in service.conflicts:
			for x in services:
				if conflict == x.__name__:
					stop(conflict)
		remaining_dependencies = service.depends
		for x in services:
			for dependency in remaining_dependencies:
				if x.__name__ == dependency:
					remaining_dependencies.remove(dependency)
		for dependency in remaining_dependencies:
			start(dependency)
		service.start()
		services.append(service)
		print (service.description + " service was started successfully.")
	except Exception as e:
		print (srv + " could not be started. (" + str(e) + ")")
		if debug: #TODO: This doesn't work as expected.
			raise

def stop(srv):
	print ("Trying to stop " + srv + " service...")
	try:
		for x in services:
			if x.__name__ == srv:
				service = x
		for x in services:
			for dependency in x.depends:
				if dependency == x.__name__:
					stop(dependency)
		service.stop()
		services.remove(Service)
		print (service.description + " service was stopped successfully.")
	except Exception as e:
		print (service.description + " service could not be stopped. (" + str(e) + ")")
		if debug: #TODO: This doesn't work as expected.
			raise

wanted_target = ""
debug = False
cmdline = open("/proc/cmdline")
for line in cmdline:
	params = line.split(" ")
	for x in params:
		z = x.split("=")
		if z[0] == "yarfi-target":
			wanted_target = z[1]
		if z[0] == "yarfi-debug":
			debug = True
cmdline.close()
if wanted_target == "":
	wanted_target = "default"

reach_target(wanted_target)
QTimer.singleShot(5000, DBusService) #wait a few second so that the D-Bus daemon should be ready
app.exec_()
